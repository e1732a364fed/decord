name: Build and Publish to PyPI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]  # Corregido windows-2025 a windows-2022

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Versión base para ejecutar cibuildwheel

      - name: Install cibuildwheel and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.22.0  # Versión específica que pediste
          python -m pip install pytest  # Para las pruebas

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*  # Construye para Python 3.9 a 3.12
          CIBW_SKIP: "*musllinux*"  # Omite musllinux (como en tu config original)
          CIBW_BEFORE_BUILD: |
            if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update && sudo apt-get install -y --no-install-recommends ffmpeg libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev
            elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install ffmpeg cmake nasm yasm
            elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install ffmpeg cmake ninja -y
            fi
          CIBW_ENVIRONMENT: 'DMLC_LOG_STACK_TRACE=0'  # Variables de entorno
          CIBW_TEST_COMMAND: python -m pytest {project}/tests/python/unittests -v
          CIBW_TEST_REQUIRES: pytest numpy

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Solo en tags
    environment:
      name: pypi
      url: https://pypi.org/p/decord
    permissions:
      id-token: write  # Para publicación confiable

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheelhouse
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12

  testpypi:
    name: Publish to TestPyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Solo en tags
    environment:
      name: testpypi
      url: https://test.pypi.org/p/decord
    permissions:
      id-token: write  # Para publicación confiable

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheelhouse
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          repository_url: https://test.pypi.org/